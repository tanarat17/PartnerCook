var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as PropTypes from 'prop-types';
import { createElement, useEffect, useState } from 'react';
import { useLoginStateManager } from '../hooks/index.js';
import { getInitializedLiff } from '../lib/index.js';
const LiffProviderPropTypes = {
    children: PropTypes.element.isRequired,
    liffId: PropTypes.string.isRequired,
    withLoginOnExternalBrowser: PropTypes.bool,
    plugins: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.array])),
    callback: PropTypes.func,
};
export const createLiffProvider = context => {
    const LiffProvider = (_a) => {
        var { children } = _a, rest = __rest(_a, ["children"]);
        const [error, setError] = useState();
        const [isReady, setIsReady] = useState(false);
        const [originalLiff, setLiff] = useState();
        const [isLoggedIn, liff] = useLoginStateManager(originalLiff);
        useEffect(() => {
            (() => __awaiter(void 0, void 0, void 0, function* () {
                try {
                    setLiff(yield getInitializedLiff(rest));
                    setIsReady(true);
                }
                catch (e) {
                    setError(e);
                }
            }))();
        }, [rest]);
        return createElement(context.Provider, { value: { error, isLoggedIn, isReady, liff } }, children);
    };
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    LiffProvider.propTypes = LiffProviderPropTypes;
    return LiffProvider;
};
