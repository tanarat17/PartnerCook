var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
const getLiff = () => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore: This is an issue of @line/liff
    return (_a = window.liff) !== null && _a !== void 0 ? _a : (yield import('@line/liff')).default;
});
const registerLiffPlugin = (liff, plugin) => {
    Array.isArray(plugin) ? liff.use(...plugin) : liff.use(plugin);
};
const getInitializedLiff = (_b) => __awaiter(void 0, void 0, void 0, function* () {
    var { plugins = [], callback = () => { } } = _b, liffConfig = __rest(_b, ["plugins", "callback"]);
    const liff = yield getLiff();
    plugins.forEach(plugin => registerLiffPlugin(liff, plugin));
    yield liff.init(liffConfig);
    yield callback(liff);
    return liff;
});
export { getInitializedLiff };
