import { Liff, LiffPlugin } from '@line/liff';
declare global {
    interface Window {
        liff?: Liff;
    }
}
type LiffConfig = Parameters<Liff['init']>[0];
type Plugin<PluginOption = any> = LiffPlugin<any, void> | [LiffPlugin<any, PluginOption>, PluginOption];
interface GetInitializedLiffProps extends LiffConfig {
    plugins?: Plugin[];
    callback?: (liff: Liff) => Promise<void>;
}
type GetInitializedLiff = (props: GetInitializedLiffProps) => Promise<Liff>;
declare const getInitializedLiff: GetInitializedLiff;
export type { GetInitializedLiff, GetInitializedLiffProps };
export { getInitializedLiff };
