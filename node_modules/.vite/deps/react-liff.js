import {
  require_prop_types
} from "./chunk-4EGKYBNQ.js";
import {
  require_react
} from "./chunk-KQPGYOHB.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/react-liff/dist/context/create-liff-context.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/react-liff/dist/context/create-liff-provider.js
var PropTypes = __toESM(require_prop_types(), 1);
var import_react2 = __toESM(require_react(), 1);

// node_modules/react-liff/dist/hooks/use-login-state-manager.js
var import_react = __toESM(require_react(), 1);
var __rest = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var useLoginStateManager = (liff) => {
  const _a = liff !== null && liff !== void 0 ? liff : {}, { isLoggedIn = () => false, login = () => {
  }, logout = () => {
  } } = _a, rest = __rest(_a, ["isLoggedIn", "login", "logout"]);
  const [loginState, setLoginState] = (0, import_react.useState)(false);
  (0, import_react.useEffect)(() => {
    setLoginState(isLoggedIn());
  }, [isLoggedIn]);
  const customLogin = (...args) => {
    login(...args);
    setLoginState(isLoggedIn());
  };
  const customLogout = () => {
    logout();
    setLoginState(isLoggedIn());
  };
  return [loginState, Object.assign(Object.assign({}, rest), { isLoggedIn, login: customLogin, logout: customLogout })];
};

// node_modules/react-liff/dist/lib/get-initialized-liff.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var getLiff = () => __awaiter(void 0, void 0, void 0, function* () {
  var _a;
  return (_a = window.liff) !== null && _a !== void 0 ? _a : (yield import("./liff-X2NMFIDO.js")).default;
});
var registerLiffPlugin = (liff, plugin) => {
  Array.isArray(plugin) ? liff.use(...plugin) : liff.use(plugin);
};
var getInitializedLiff = (_b) => __awaiter(void 0, void 0, void 0, function* () {
  var { plugins = [], callback = () => {
  } } = _b, liffConfig = __rest2(_b, ["plugins", "callback"]);
  const liff = yield getLiff();
  plugins.forEach((plugin) => registerLiffPlugin(liff, plugin));
  yield liff.init(liffConfig);
  yield callback(liff);
  return liff;
});

// node_modules/react-liff/dist/context/create-liff-provider.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __rest3 = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var LiffProviderPropTypes = {
  children: PropTypes.element.isRequired,
  liffId: PropTypes.string.isRequired,
  withLoginOnExternalBrowser: PropTypes.bool,
  plugins: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.array])),
  callback: PropTypes.func
};
var createLiffProvider = (context) => {
  const LiffProvider2 = (_a) => {
    var { children } = _a, rest = __rest3(_a, ["children"]);
    const [error, setError] = (0, import_react2.useState)();
    const [isReady, setIsReady] = (0, import_react2.useState)(false);
    const [originalLiff, setLiff] = (0, import_react2.useState)();
    const [isLoggedIn, liff] = useLoginStateManager(originalLiff);
    (0, import_react2.useEffect)(() => {
      (() => __awaiter2(void 0, void 0, void 0, function* () {
        try {
          setLiff(yield getInitializedLiff(rest));
          setIsReady(true);
        } catch (e) {
          setError(e);
        }
      }))();
    }, [rest]);
    return (0, import_react2.createElement)(context.Provider, { value: { error, isLoggedIn, isReady, liff } }, children);
  };
  LiffProvider2.propTypes = LiffProviderPropTypes;
  return LiffProvider2;
};

// node_modules/react-liff/dist/context/create-liff-context.js
var createLiffContext = () => {
  const context = (0, import_react3.createContext)({
    isLoggedIn: false,
    isReady: false,
    liff: {}
  });
  context.displayName = "LiffContext";
  return {
    LiffConsumer: context.Consumer,
    LiffProvider: createLiffProvider(context),
    useLiff: () => (0, import_react3.useContext)(context)
  };
};

// node_modules/react-liff/dist/context/index.js
var { LiffConsumer, LiffProvider, useLiff } = createLiffContext();
export {
  LiffConsumer,
  LiffProvider,
  useLiff
};
//# sourceMappingURL=react-liff.js.map
