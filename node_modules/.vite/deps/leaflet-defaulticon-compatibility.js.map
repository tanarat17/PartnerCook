{
  "version": 3,
  "sources": ["../../leaflet-defaulticon-compatibility/src/Icon.Default.compatibility.js"],
  "sourcesContent": ["import * as L from 'leaflet';\r\n\r\n\r\nL.Icon.Default.mergeOptions({\r\n\t// Erase default options, so that they can be overridden by _initializeOptions if not supplied.\r\n\ticonUrl: null,\r\n\ticonRetinaUrl: null,\r\n\tshadowUrl: null,\r\n\ticonSize: null,\r\n\ticonAnchor: null,\r\n\tpopupAnchor: null,\r\n\ttooltipAnchor: null,\r\n\tshadowSize: null,\r\n\r\n\t// @option classNamePrefix: String = 'leaflet-default-icon-'\r\n\t// Prefix for the classes defined in CSS that contain the Icon options.\r\n\t// See the leaflet-defaulticon-compatibility.css file as a starter.\r\n\t// Expected suffixes are \"icon\", \"shadow\", \"popup\" and \"tooltip\".\r\n\tclassNamePrefix: 'leaflet-default-icon-',\r\n});\r\n\r\n\r\nL.Icon.Default.include({\r\n\r\n\t_needsInit: true,\r\n\r\n\t// Override to make sure options are retrieved from CSS.\r\n\t_getIconUrl: function (name) {\r\n\t\t// @option imagePath: String\r\n\t\t// `Icon.Default` will try to auto-detect the location of\r\n\t\t// the blue icon images. If you are placing these images in a\r\n\t\t// non-standard way, set this option to point to the right\r\n\t\t// path, before any marker is added to a map.\r\n\t\t// Caution: do not use this option with inline base64 image(s).\r\n\t\tvar imagePath = this.options.imagePath || L.Icon.Default.imagePath || '';\r\n\t\t// Deprecated (IconDefault.imagePath), backwards-compatibility only\r\n\r\n\t\tif (this._needsInit) {\r\n\t\t\t// Modifying imagePath option after _getIconUrl has been called\r\n\t\t\t// once in this instance of IconDefault will no longer have any\r\n\t\t\t// effect.\r\n\t\t\tthis._initializeOptions(imagePath);\r\n\t\t}\r\n\r\n\t\treturn imagePath + L.Icon.prototype._getIconUrl.call(this, name);\r\n\t},\r\n\r\n\t// Initialize all necessary options for this instance.\r\n\t_initializeOptions: function (imagePath) {\r\n\t\tthis._setOptions('icon', _detectIconOptions, imagePath);\r\n\t\tthis._setOptions('shadow', _detectIconOptions, imagePath);\r\n\t\tthis._setOptions('popup', _detectDivOverlayOptions);\r\n\t\tthis._setOptions('tooltip', _detectDivOverlayOptions);\r\n\t\tthis._needsInit = false;\r\n\t},\r\n\r\n\t// Retrieve values from CSS and assign to this instance options.\r\n\t_setOptions: function (name, detectorFn, imagePath) {\r\n\t\tvar options = this.options,\r\n\t\t    prefix = options.classNamePrefix,\r\n\t\t    optionValues = detectorFn(prefix + name, imagePath);\r\n\r\n\t\tfor (var optionName in optionValues) {\r\n\t\t\toptions[name + optionName] = options[name + optionName] || optionValues[optionName];\r\n\t\t}\r\n\t}\r\n\r\n});\r\n\r\n\r\n// Retrieve icon option values from CSS (icon or shadow).\r\nfunction _detectIconOptions(className, imagePath) {\r\n\tvar el = L.DomUtil.create('div',  className, document.body),\r\n\t    urlsContainer = _getBkgImageOrCursor(el),\r\n\t    urls = _extractUrls(urlsContainer, imagePath),\r\n\t    iconX = _getStyleInt(el, 'width'),\r\n\t    iconY = _getStyleInt(el, 'height'),\r\n\t    anchorNX = _getStyleInt(el, 'margin-left'),\r\n\t    anchorNY = _getStyleInt(el, 'margin-top');\r\n\r\n\tel.parentNode.removeChild(el);\r\n\r\n\treturn {\r\n\t\tUrl: urls[0],\r\n\t\tRetinaUrl: urls[1],\r\n\t\tSize: [iconX, iconY],\r\n\t\tAnchor: [-anchorNX, -anchorNY]\r\n\t};\r\n}\r\n\r\n// Retrieve anchor option values from CSS (popup or tooltip).\r\nfunction _detectDivOverlayOptions(className) {\r\n\tvar el = L.DomUtil.create('div', className, document.body),\r\n\t    anchorX = _getStyleInt(el, 'margin-left'),\r\n\t    anchorY = _getStyleInt(el, 'margin-top');\r\n\r\n\tel.parentNode.removeChild(el);\r\n\r\n\treturn {\r\n\t\tAnchor: [anchorX, anchorY]\r\n\t};\r\n}\r\n\r\n// Read the CSS url (could be path or inline base64), may be multiple.\r\n// First: normal icon\r\n// Second: Retina icon\r\nfunction _extractUrls(urlsContainer, imagePath) {\r\n\tvar re = /url\\(['\"]?([^\"']*?)['\"]?\\)/gi, // Match anything between url( and ), possibly with single or double quotes.\r\n\t    urls = [],\r\n\t    m = re.exec(urlsContainer);\r\n\r\n\twhile (m) {\r\n\t\t// Keep the entire URL from CSS rule, so that each image can have its own full URL.\r\n\t\t// Except in the case imagePath is provided: remove the path part (i.e. keep only the file name).\r\n\t\turls.push(imagePath ? _stripPath(m[1]) : m[1]);\r\n\t\tm = re.exec(urlsContainer);\r\n\t}\r\n\r\n\treturn urls;\r\n}\r\n\r\n// Remove anything before the last slash (/) occurrence (inclusive).\r\n// Caution: will give unexpected result if url is inline base64 data\r\n// => do not specify imagePath in that case!\r\nfunction _stripPath(url) {\r\n\treturn url.substr(url.lastIndexOf('/') + 1);\r\n}\r\n\r\nfunction _getStyleInt(el, style) {\r\n\treturn parseInt(_getStyle(el, style), 10);\r\n}\r\n\r\n// Factorize style reading fallback for IE8.\r\nfunction _getStyle(el, style) {\r\n\treturn L.DomUtil.getStyle(el, style) || L.DomUtil.getStyle(el, _kebabToCamelCase(style));\r\n}\r\n\r\n// When Firefox high contrast (colours override) option is enabled,\r\n// \"background-image\" is overridden by the browser as \"none\".\r\n// In that case, fallback to \"cursor\". But keep \"background-image\"\r\n// as primary source because IE expects cursor URL as relative to HTML page\r\n// instead of relative to CSS file.\r\nfunction _getBkgImageOrCursor(el) {\r\n\tvar bkgImage = _getStyle(el, 'background-image');\r\n\r\n\treturn bkgImage && bkgImage !== 'none' ? bkgImage : _getStyle(el, 'cursor');\r\n}\r\n\r\n// Convert kebab-case CSS property name to camelCase for IE currentStyle.\r\nfunction _kebabToCamelCase(prop) {\r\n\treturn prop.replace(/-(\\w)/g, function (str, w) {\r\n\t\treturn w.toUpperCase();\r\n\t});\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
