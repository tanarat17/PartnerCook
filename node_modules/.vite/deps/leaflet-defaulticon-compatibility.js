import {
  require_leaflet_src
} from "./chunk-YNZKXTPW.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/leaflet-defaulticon-compatibility/src/Icon.Default.compatibility.js
var L = __toESM(require_leaflet_src());
L.Icon.Default.mergeOptions({
  // Erase default options, so that they can be overridden by _initializeOptions if not supplied.
  iconUrl: null,
  iconRetinaUrl: null,
  shadowUrl: null,
  iconSize: null,
  iconAnchor: null,
  popupAnchor: null,
  tooltipAnchor: null,
  shadowSize: null,
  // @option classNamePrefix: String = 'leaflet-default-icon-'
  // Prefix for the classes defined in CSS that contain the Icon options.
  // See the leaflet-defaulticon-compatibility.css file as a starter.
  // Expected suffixes are "icon", "shadow", "popup" and "tooltip".
  classNamePrefix: "leaflet-default-icon-"
});
L.Icon.Default.include({
  _needsInit: true,
  // Override to make sure options are retrieved from CSS.
  _getIconUrl: function(name) {
    var imagePath = this.options.imagePath || L.Icon.Default.imagePath || "";
    if (this._needsInit) {
      this._initializeOptions(imagePath);
    }
    return imagePath + L.Icon.prototype._getIconUrl.call(this, name);
  },
  // Initialize all necessary options for this instance.
  _initializeOptions: function(imagePath) {
    this._setOptions("icon", _detectIconOptions, imagePath);
    this._setOptions("shadow", _detectIconOptions, imagePath);
    this._setOptions("popup", _detectDivOverlayOptions);
    this._setOptions("tooltip", _detectDivOverlayOptions);
    this._needsInit = false;
  },
  // Retrieve values from CSS and assign to this instance options.
  _setOptions: function(name, detectorFn, imagePath) {
    var options = this.options, prefix = options.classNamePrefix, optionValues = detectorFn(prefix + name, imagePath);
    for (var optionName in optionValues) {
      options[name + optionName] = options[name + optionName] || optionValues[optionName];
    }
  }
});
function _detectIconOptions(className, imagePath) {
  var el = L.DomUtil.create("div", className, document.body), urlsContainer = _getBkgImageOrCursor(el), urls = _extractUrls(urlsContainer, imagePath), iconX = _getStyleInt(el, "width"), iconY = _getStyleInt(el, "height"), anchorNX = _getStyleInt(el, "margin-left"), anchorNY = _getStyleInt(el, "margin-top");
  el.parentNode.removeChild(el);
  return {
    Url: urls[0],
    RetinaUrl: urls[1],
    Size: [iconX, iconY],
    Anchor: [-anchorNX, -anchorNY]
  };
}
function _detectDivOverlayOptions(className) {
  var el = L.DomUtil.create("div", className, document.body), anchorX = _getStyleInt(el, "margin-left"), anchorY = _getStyleInt(el, "margin-top");
  el.parentNode.removeChild(el);
  return {
    Anchor: [anchorX, anchorY]
  };
}
function _extractUrls(urlsContainer, imagePath) {
  var re = /url\(['"]?([^"']*?)['"]?\)/gi, urls = [], m = re.exec(urlsContainer);
  while (m) {
    urls.push(imagePath ? _stripPath(m[1]) : m[1]);
    m = re.exec(urlsContainer);
  }
  return urls;
}
function _stripPath(url) {
  return url.substr(url.lastIndexOf("/") + 1);
}
function _getStyleInt(el, style) {
  return parseInt(_getStyle(el, style), 10);
}
function _getStyle(el, style) {
  return L.DomUtil.getStyle(el, style) || L.DomUtil.getStyle(el, _kebabToCamelCase(style));
}
function _getBkgImageOrCursor(el) {
  var bkgImage = _getStyle(el, "background-image");
  return bkgImage && bkgImage !== "none" ? bkgImage : _getStyle(el, "cursor");
}
function _kebabToCamelCase(prop) {
  return prop.replace(/-(\w)/g, function(str, w) {
    return w.toUpperCase();
  });
}
//# sourceMappingURL=leaflet-defaulticon-compatibility.js.map
